import java.util.TreeSet;

/**
 * The four adjacent digits in the 1000-digit number that have the greatest
 * product are 9 × 9 × 8 × 9 = 5832.
 *
 * Find the thirteen adjacent digits in the 1000-digit number that have the
 * greatest product. What is the value of this product?
 */
public class Problem8 {

    public static void main(String[] args) {
        String number = "73167176531330624919225119674426574742355349194934969";
        number += "83520312774506326239578318016984801869478851843858615607891";
        number += "12949495459501737958331952853208805511125406987471585238630";
        number += "50715693290963295227443043557668966489504452445231617318564";
        number += "03098711121722383113622298934233803081353362766142828064444";
        number += "86645238749303589072962904915604407723907138105158593079608";
        number += "66701724271218839987979087922749219016997208880937766572733";
        number += "30010533678812202354218097512545405947522435258490771167055";
        number += "60136048395864467063244157221553975369781797784617406495514";
        number += "92908625693219784686224828397224137565705605749026140797296";
        number += "86524145351004748216637048440319989000889524345065854122758";
        number += "86668811642717147992444292823086346567481391912316282458617";
        number += "86645835912456652947654568284891288314260769004224219022671";
        number += "05562632111110937054421750694165896040807198403850962455444";
        number += "36298123098787992724428490918884580156166097919133875499200";
        number += "52406368991256071760605886116467109405077541002256983155200";
        number += "05593572972571636269561882670428252483600823257530420752963";
        number += "450";
        TreeSet<Long> products = new TreeSet<Long>();

        for (int i = 0; i <= 1000; i++) {
            if (i + 13 > 1000) {
                break;
            }

            String str = number.substring(i, i + 13);

            long product = 1;
            for (char s : str.toCharArray()) {
                product *= Character.getNumericValue(s);
            }

            products.add(product);
        }

        System.out.println(products.last());
    }

}
