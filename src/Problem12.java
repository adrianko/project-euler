/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */
public class Problem12 {

    /**
     * As given in the problem, nth triangle number is generated by adding
     * first n natural numbers. The sum of first n natural numbers or the nth
     * triangular number is given by
     *
     * n * (n + 1) / 2
     *
     * The factors occur in pairs and its enough to find the factors up to the
     * square root of the triangle number and increment the count by two each
     * time a factor is found.
     */
    public static void main(String[] args) {
        int divisors = 1;
        int i = 1;
        long triTotal = 0;
        while (divisors < 500) {
            triTotal += i;

            for (int k = 2; k <= Math.sqrt(triTotal); k++) {
                if (triTotal % k == 0) {
                    divisors += 2;
                }
            }

            divisors++;
            if (divisors > 500) {
                System.out.println(divisors + " " + triTotal);
                break;
            }

            divisors = 1;
            i++;
        }
    }

}